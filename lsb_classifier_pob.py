# -*- coding: utf-8 -*-
"""lsb_classifier_POB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CbYWlyNF7VILYpkHHpav80skdUlOYaBQ

## Lsb Classifier
"""

import numpy as np
import random
import matplotlib.pyplot as plt

"""## Creating Dataset"""

lsb0=[]
lsb1=[]

for i in range(256):
  if i & 1==0:
    lsb0.append(i)
  elif i & 1==1:
    lsb1.append(i) 

print(lsb0)
print(lsb1)

import math
def combination(b, r, n):
  comb= math.comb(n,r)
  return comb*int(b)

arr1=[]

for i in lsb0:
  s1= bin(i)
  # 1100010
  
 
  csum=0
  tsum=0
  for i in range( len(s1) - 1, 1, -1) :
    elem= s1[i]
    tsum+= int(elem)
    csum+= combination(elem, tsum, i)

  arr1.append(csum)    

print(arr1)
print(len(arr1))
print(max(arr1)) 
print(set(arr1))

l0=[]
l2=[]
l4=[]
l5=[]
l6=[]
l7=[]
l8=[]
l9=[]
l10=[]
l11=[]
l12=[]
l13=[]
l14=[]
l15=[]
l16=[]
l17=[]
l18=[] 
l19=[]
l20=[]
l21=[]
l22=[]
l23=[]
l24=[]
l25=[]
l26=[]
l27=[]
l28=[] 
l29=[]
l30=[]
l32=[]
l33=[]
l34=[]
l39=[]
l40=[] 
l49=[]
l50=[]
l54=[]
ind=0

for i in arr1:
  if(i==0):
    l0.append(lsb0[ind])
  elif(i==2):
    l2.append(lsb0[ind])
  elif(i==4):
    l4.append(lsb0[ind])
  elif(i==5):
    l5.append(lsb0[ind])
  elif(i==6):
    l6.append(lsb0[ind])
  elif(i==7):
    l7.append(lsb0[ind])
  elif(i==8):
    l8.append(lsb0[ind])
  elif(i==9):
    l9.append(lsb0[ind])  
  elif(i==10):
    l10.append(lsb0[ind])
  elif(i==11):
    l11.append(lsb0[ind])      
  elif(i==12):
    l12.append(lsb0[ind])
  elif(i==13):
    l13.append(lsb0[ind])
  elif(i==14):
    l14.append(lsb0[ind])  
  elif(i==15):
    l15.append(lsb0[ind])
  elif(i==16):
    l16.append(lsb0[ind])      
  elif(i==17):
    l17.append(lsb0[ind])  
  elif(i==18):
    l18.append(lsb0[ind])
  elif(i==19):
    l19.append(lsb0[ind])  
  elif(i==20):
    l20.append(lsb0[ind])
  elif(i==21):
    l21.append(lsb0[ind])  
  elif(i==22):
    l22.append(lsb0[ind]) 
  elif(i==23):
    l23.append(lsb0[ind]) 
  elif(i==24):
    l24.append(lsb0[ind]) 
  elif(i==25):
    l25.append(lsb0[ind]) 
  elif(i==26):
    l26.append(lsb0[ind]) 
  elif(i==27):
    l27.append(lsb0[ind]) 
  elif(i==28):
    l28.append(lsb0[ind]) 
  elif(i==29):
    l29.append(lsb0[ind]) 
  elif(i==30):
    l30.append(lsb0[ind]) 
  elif(i==32):
    l32.append(lsb0[ind]) 
  elif(i==33):
    l33.append(lsb0[ind]) 
  elif(i==34):
    l34.append(lsb0[ind]) 
  elif(i==39):
    l39.append(lsb0[ind]) 
  elif(i==40):
    l40.append(lsb0[ind]) 
  elif(i==49):
    l49.append(lsb0[ind]) 
  elif(i==50):
    l50.append(lsb0[ind]) 
  elif(i==54):
    l54.append(lsb0[ind]) 
    
     
  ind= ind+1

arrays_arr=[l0, l2, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23, l24, l26, l27, l29, l30, l32, l33, l34, l39, l40, l49, l50, l54]
indes=0
for i in arrays_arr:
  print("POB of:", set(i), "is ",lsb0[indes])
  # print(lsb0[indes],":", set(i))
  # print(set(i))
  indes= indes+1

"""Now our training set data for LSB=0 and LSB=1 is ready. The list of pixels of a greyscale image is also ready

spliting the data into training and testing sets
"""

from sklearn.model_selection import train_test_split
zero_train, zero_test, one_train, one_test= train_test_split(lsb0, lsb1,test_size=0.2, random_state=42)

"""Training the model

## Model
"""

from sklearn.linear_model import LinearRegression
model= LinearRegression()

# reshaping
zero_train= np.reshape(zero_train, (-1,1) )
zero_test= np.reshape(zero_test, (-1,1) )

one_train= np.reshape(one_train, (-1, 1) )
one_test= np.reshape(one_test, (-1, 1) )

model.fit(zero_train, one_train)

"""Evaluate the Model"""

from sklearn.metrics import r2_score, mean_squared_error

# use the trained model to predict on test data
one_pred= model.predict(zero_test)

# evaluate the performance of the model using R^2 and Mean Squared Error
r2= r2_score(one_test, one_pred)
mse= mean_squared_error(one_test, one_pred)

print(f"R^2: {r2}, MSE: {mse}")

"""## Prediction"""

def solve(n) :
   s = str(n)

   flag = False
   for i in range(len(s) - 1, -1, -1) :
      if s[i] == '0' and flag == False :
         continue
  
      if s[i] == '.':
         flag = True
         continue
        
      if int(s[i]) % 2 == 0 :
         return 0
           
      return 1

from PIL import Image

from google.colab import drive
drive.mount('/content/drive')

img= Image.open("/content/drive/My Drive/img classification/gr.png").convert('L')
pixels= list(img.getdata())

print(pixels)

lsb0_list=[]
lsb1_list=[]

for i in range(len(pixels)):
      elem= pixels[i]

      x_new= np.array([[elem]])
      y_pred= model.predict(x_new)
    
      n = y_pred[0][0]
      t= solve(int(n))
      if(t==0):
        lsb0_list.append(elem)
      elif(t==1):
        lsb1_list.append(elem)

      print(solve(int(n)))

"""Check lsb0 and lsb1 list"""

print(lsb0_list)

print(lsb1_list)

odd_elem=[]

for i in lsb1_list:
  if(lsb1_list[i]%2==0):
    odd_elem.append(lsb1_list[i])

print(odd_elem)
print(len(odd_elem))

"""## lsb0_list -> Pob number system -> find maximum

"""

import math
def combination(b, r, n):
  comb= math.comb(n,r)
  return comb*int(b)

# Create a 2D array of size 671x671 filled with None
my_array = [[None for _ in range(671)] for _ in range(671)]



arr=[]


for i in lsb0_list:
  s= bin(lsb0_list[i])
  # 1100010
  csum=0
  tsum=0
  for i in range( len(s) - 1, 1, -1) :
    elem= s[i]
    tsum+= int(elem)
    csum+= combination(elem, tsum, i)

  arr.append(csum)    

print(arr)
print(len(arr))
print(max(arr))

arr1=[]

for i in lsb0:
  s1= bin(lsb0[i])
  # 1100010
  csum=0
  tsum=0
  for i in range( len(s1) - 1, 1, -1) :
    elem= s1[i]
    tsum+= int(elem)
    csum+= combination(elem, tsum, i)

  arr1.append(csum)    

print(arr1)
print(len(arr1))
print(max(arr1))

def most_frequent(List):
    return max(set(List), key = List.count)
print(most_frequent(arr))

print(lsb0_list)
print(len(lsb0_list))

d={}
index=0
for i in arr:
  if(i in d):
 #   d[i].append(lsb0_list[index])
  else:  
    d[i]=lsb0_list[index]
  index= index+1

print(d)

l7=[]
l17=[]
l33=[]
l13=[]
l23=[]
l5=[]
l16=[]
l32=[]
l4=[]
l8=[]
l10=[]
l29=[]
l21=[]
l11=[]
l26=[]
l12=[]
l20=[] 
l6=[]
l14=[]
l22=[]
ind=0

# for i in arr:
#   if(i==7):
#     l7.append(lsb0_list[ind])
#   elif(i==17):
#     l17.append(lsb0_list[ind])
#   elif(i==33):
#     l33.append(lsb0_list[ind])
#   elif(i==13):
#     l13.append(lsb0_list[ind])
#   elif(i==23):
#     l23.append(lsb0_list[ind])
#   elif(i==5):
#     l5.append(lsb0_list[ind])
#   elif(i==16):
#     l16.append(lsb0_list[ind])
#   elif(i==32):
#     l32.append(lsb0_list[ind])  
#   elif(i==4):
#     l4.append(lsb0_list[ind])
#   elif(i==8):
#     l8.append(lsb0_list[ind])      
#   elif(i==10):
#     l10.append(lsb0_list[ind])
#   elif(i==29):
#     l29.append(lsb0_list[ind])
#   elif(i==21):
#     l21.append(lsb0_list[ind])  
#   elif(i==11):
#     l11.append(lsb0_list[ind])
#   elif(i==26):
#     l26.append(lsb0_list[ind])      
#   elif(i==12):
#     l12.append(lsb0_list[ind])  
#   elif(i==20):
#     l20.append(lsb0_list[ind])
#   elif(i==6):
#     l6.append(lsb0_list[ind])  
#   elif(i==14):
#     l14.append(lsb0_list[ind])
#   elif(i==22):
#     l22.append(lsb0_list[ind]) 
#   ind= ind+1

for i in arr1:
  if(i==7):
    l7.append(lsb0[ind])
  elif(i==17):
    l17.append(lsb0[ind])
  elif(i==33):
    l33.append(lsb0[ind])
  elif(i==13):
    l13.append(lsb0[ind])
  elif(i==23):
    l23.append(lsb0[ind])
  elif(i==5):
    l5.append(lsb0[ind])
  elif(i==16):
    l16.append(lsb0[ind])
  elif(i==32):
    l32.append(lsb0[ind])  
  elif(i==4):
    l4.append(lsb0[ind])
  elif(i==8):
    l8.append(lsb0[ind])      
  elif(i==10):
    l10.append(lsb0[ind])
  elif(i==29):
    l29.append(lsb0[ind])
  elif(i==21):
    l21.append(lsb0[ind])  
  elif(i==11):
    l11.append(lsb0[ind])
  elif(i==26):
    l26.append(lsb0[ind])      
  elif(i==12):
    l12.append(lsb0[ind])  
  elif(i==20):
    l20.append(lsb0[ind])
  elif(i==6):
    l6.append(lsb0[ind])  
  elif(i==14):
    l14.append(lsb0[ind])
  elif(i==22):
    l22.append(lsb0[ind]) 
  ind= ind+1

print("l7:", set(l7))
print("l17:", set(l17))
print("l33:", set(l33))
print("l13:", set(l13))
print("l23:", set(l23))
print("l5:", set(l5))
print("l16:", set(l16))
print("l32:", set(l32))
print("l4:", set(l4))
print("l8:", set(l8))
print("l10:", set(l10))
print("l29:", set(l29))
print("l21:", set(l21))
print("l11:", set(l11))
print("l26:", set(l26))
print("l12:", set(l12))
print("l20:", set(l20))
print("l6:", set(l6))
print("l14:", set(l14))
print("l22:", set(l22))

d={}

for i in arr:
  d[i]= lsb0_list[i]
  
print(d)

c=arr.copy()
for i in range(len(c)):
  c[i]= c[i]*2

"""Generate the random binary bit of length same as the size of arr"""

import random
 
def generate_binary_string(n):
    # Generate a random number with n bits
    number = random.getrandbits(n)
    # Convert the number to binary
    binary_string = format(number, '0b')
    return binary_string

binary= generate_binary_string(len(c)) 
print( binary)

"""Encryption"""

for i in range(len(binary)):
  c[i]= c[i]+ int(binary[i])

print(c)
print (arr)

"""Apply AES Library to lsb0_list and lsb1_list

Encrypt and Decrypt a list using AES in python
"""

pip install pycryptodome

# pip install pycryptodome
from Crypto.Cipher import AES
import base64

# Define the key and initialization vector (IV)
key = b'1110101101000101' # Change this to your own key
iv = b'1100110110101011' # Change this to your own IV

# Define the data to encrypt
my_list = lsb0_list

# Convert the list to a string
my_string = str(my_list)

# Pad the string so it is a multiple of 16 bytes (the block size for AES)
while len(my_string) % 16 != 0:
    my_string += ' '

# Create the AES cipher object
cipher = AES.new(key, AES.MODE_CBC, iv)

# Encrypt the data
cipher_text = cipher.encrypt(my_string.encode())

# Encode the encrypted data as base64
cipher_text_base64 = base64.b64encode(cipher_text).decode()

# Decrypt the data
cipher = AES.new(key, AES.MODE_CBC, iv)
decrypted_text = cipher.decrypt(base64.b64decode(cipher_text_base64)).decode().rstrip()

# Convert the decrypted string back to a list
decrypted_list = eval(decrypted_text)

# Print the original list and decrypted list to verify the encryption and decryption worked
print(my_list)
print(decrypted_list)